#include <iostream>
#include "encrypt.h"

int main() {
    hls::stream<axi_t> S_AXIS, M_AXIS;
    int A[N], R[N];
    int V_sw[N], W_sw[N];

    int pk[]={7633, 6814, 4459, 568, 2822, 3540, 2722, 368, 4159, 6414, 7133, 6316, 3963, 74, 2330, 3050, 2234, 7563, 3675, 5932, 6653, 5838, 3487, 7281, 1858, 2580, 1766, 7097, 3211, 5470, 6193, 5380, 3031, 6827, 1406, 2130, 1318, 6651, 2767, 5028, 5753, 4942, 2595, 6393, 974, 1700, 890, 6225, 2343, 4606, 5333, 4524, 2179, 5979, 562, 1290, 482, 5819, 1939, 4204, 4933, 4126, 1783, 5585, 170, 900, 94, 5433, 1555, 3822, 4553, 3748, 1407, 5211, 7479, 530, 7407, 5067, 1191, 3460, 4193, 3390, 1051, 4857, 7127, 180, 7059, 4721, 847, 3118, 3853, 3052, 715, 4523, 6795, 7531, 6731, 4395, 523, 2796, 3533, 2734, 399, 4209, 6483, 7221, 6423, 4089, 219, 2494, 3233, 2436, 103, 3915, 6191, 6931, 6135, 3803, 7616, 2212, 2953, 2158, 7508, 3641, 5919, 6661, 5867, 3537, 7352, 1950, 2693, 1900, 7252, 3387, 5667, 6411, 5619, 3291, 7108, 1708, 2453, 1662, 7016, 3153, 5435, 6181, 5391, 3065, 6884, 1486, 2233, 1444, 6800, 2939, 5223, 5971, 5183, 2859, 6680, 1284, 2033, 1246, 6604, 2745, 5031, 5781, 4995, 2673, 6496, 1102, 1853, 1068, 6428, 2571, 4859, 5611, 4827, 2507, 6332, 940, 1693, 910, 6272, 2417, 4707, 5461, 4679, 2361, 6188, 798, 1553, 772, 6136, 2283, 4575, 5331, 4551, 2235, 6064, 676, 1433, 654, 6020, 2169, 4463, 5221, 4443, 2129, 5960, 574, 1333, 556, 5924, 2075, 4371, 5131, 4355, 2043, 5876, 492, 1253, 478, 5848, 2001, 4299, 5061, 4287, 1977, 5812, 430, 1193, 420, 5792, 1947, 4247, 5011, 4239, 1931, 5768, 388, 1153, 382, 5756, 1913, 4215, 4981, 4211, 1905, 5744, 366, 1133, 364, 5740, 1899, 4203, 4971, 4203, 1899, 5740, 364, 1133, 366, 5744, 1905, 4211, 4981, 4215, 1913, 5756, 382, 1153, 388, 5768, 1931, 4239, 5011, 4247, 1947, 5792, 420, 1193, 430, 5812, 1977, 4287, 5061, 4299, 2001, 5848, 478, 1253, 492, 5876, 2043, 4355, 5131, 4371, 2075, 5924, 556, 1333, 574, 5960, 2129, 4443, 5221, 4463, 2169, 6020, 654, 1433, 676, 6064, 2235, 4551, 5331, 4575, 2283, 6136, 772, 1553, 798, 6188, 2361, 4679, 5461, 4707, 2417, 6272, 910, 1693, 940, 6332, 2507, 4827, 5611, 4859, 2571, 6428, 1068, 1853, 1102, 6496, 2673, 4995, 5781, 5031, 2745, 6604, 1246, 2033, 1284, 6680, 2859, 5183, 5971, 5223, 2939, 6800, 1444, 2233, 1486, 6884, 3065, 5391, 6181, 5435, 3153, 7016, 1662, 2453, 1708, 7108, 3291, 5619, 6411, 5667, 3387, 7252, 1900, 2693, 1950, 7352, 3537, 5867, 6661, 5919, 3641, 7508, 2158, 2953, 2212, 7616, 3803, 6135, 6931, 6191, 3915, 103, 2436, 3233, 2494, 219, 4089, 6423, 7221, 6483, 4209, 399, 2734, 3533, 2796, 523, 4395, 6731, 7531, 6795, 4523, 715, 3052, 3853, 3118, 847, 4721, 7059, 180, 7127, 4857, 1051, 3390, 4193, 3460, 1191, 5067, 7407, 530, 7479, 5211, 1407, 3748, 4553, 3822, 1555, 5433, 94, 900, 170, 5585, 1783, 4126, 4933, 4204, 1939, 5819, 482, 1290, 562, 5979, 2179, 4524, 5333, 4606, 2343, 6225, 890, 1700, 974, 6393, 2595, 4942, 5753, 5028, 2767, 6651, 1318, 2130, 1406, 6827, 3031, 5380, 6193, 5470, 3211, 7097, 1766, 2580, 1858, 7281, 3487, 5838, 6653, 5932, 3675, 7563, 2234, 3050, 2330, 74, 3963, 6316, 7133, 6414, 4159, 368, 2722, 3540, 2822, 568, 4459, 6814, 7633, 6916};
    int M0[]={0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    // 1. Input generation
    for (int i = 0; i < N; i++) {
        A[i]  = i % MOD;
//        pk[i] = (i * 2) % MOD;

        R[i]  = 1;  // For consistent output
//        M0[i] = i & 1;

        axi_t t;
        t.data = A[i];  S_AXIS.write(t);
        t.data = pk[i]; S_AXIS.write(t);
        t.data = R[i];  S_AXIS.write(t);
        t.data = M0[i]; S_AXIS.write(t);
    }

    // 2. Call DUT
    encrypt(S_AXIS, M_AXIS, true, true);

    // 3. Collect output
    int V_hw[N], W_hw[N];
    for (int i = 0; i < N; i++) {
        V_hw[i] = M_AXIS.read().data;
        W_hw[i] = M_AXIS.read().data;
    }

    // 4. Golden compute
    int tA[N], tB[N];
    for (int i = 0; i < N; i++) { tA[i] = A[i]; tB[i] = R[i]; }
    ntt_array(tA); ntt_array(tB);
    for (int i = 0; i < N; i++) V_sw[i] = mulmod(tA[i], tB[i]);
    intt_array(V_sw);

    for (int i = 0; i < N; i++) { tA[i] = pk[i]; tB[i] = R[i]; }
    ntt_array(tA); ntt_array(tB);
    for (int i = 0; i < N; i++) W_sw[i] = addmod(mulmod(tA[i], tB[i]), M0[i]);
    intt_array(W_sw);

    // 5. Compare
    bool pass = true;
    for (int i = 0; i < N; i++) {
        if (V_hw[i] != V_sw[i]) {
            std::cout << "V Mismatch @ " << i << ": HW=" << V_hw[i] << " SW=" << V_sw[i] << "\n";
            pass = false;
        }
        if (W_hw[i] != W_sw[i]) {
            std::cout << "W Mismatch @ " << i << ": HW=" << W_hw[i] << " SW=" << W_sw[i] << "\n";
            pass = false;
        }
    }

    std::cout << (pass ? "*** ENCRYPT PASSED ***\n" : "*** ENCRYPT FAILED ***\n");
    return pass ? 0 : 1;
}
